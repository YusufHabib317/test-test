generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Expense {
  id        String   @id @default(cuid())
  name      String
  category  String
  amount    Float
  date      DateTime @default(now())
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("expenses")
}

model Supplier {
  id          String            @id @default(cuid())
  name        String
  contactInfo String
  products    Product[]
  invoices    PurchaseInvoice[]
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("suppliers")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String // Examples: "Create", "Update", "Delete"
  modelName String
  modelId   String
  changes   Json
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

model Product {
  id            String         @id @default(cuid())
  name          String
  code          String?        @unique
  price         Float
  salePrice     Float          @map("sale_price")
  cost          Float
  stock         Int            @default(0)
  purchaseItems PurchaseItem[]
  saleItems     SaleItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Supplier      Supplier[]

  @@map("products")
}

model PurchaseInvoice {
  id            String         @id @default(cuid())
  invoiceNumber String         @unique
  date          DateTime       @default(now())
  supplierName  String
  items         PurchaseItem[]
  subtotal      Float
  tax           Float          @default(0)
  total         Float
  paid          Float          @default(0)
  remaining     Float          @default(0)
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Supplier      Supplier[]
  Payment       Payment[]

  @@map("purchase_invoices")
}

model PurchaseItem {
  id                String          @id @default(cuid())
  purchaseInvoice   PurchaseInvoice @relation(fields: [purchaseInvoiceId], references: [id], onDelete: Cascade)
  purchaseInvoiceId String
  product           Product         @relation(fields: [productId], references: [id])
  productId         String
  quantity          Int
  cost              Float
  total             Float

  @@map("purchase_items")
}

model SaleInvoice {
  id            String     @id @default(cuid())
  invoiceNumber String     @unique
  date          DateTime   @default(now())
  customerName  String?
  items         SaleItem[]
  subtotal      Float
  tax           Float      @default(0)
  total         Float
  paid          Float      @default(0)
  remaining     Float      @default(0)
  notes         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Payment       Payment[]

  @@map("sale_invoices")
}

model SaleItem {
  id            String      @id @default(cuid())
  saleInvoice   SaleInvoice @relation(fields: [saleInvoiceId], references: [id], onDelete: Cascade)
  saleInvoiceId String
  product       Product     @relation(fields: [productId], references: [id])
  productId     String
  quantity      Int
  price         Float
  total         Float

  @@map("sale_items")
}

enum PaymentType {
  CUSTOMER_PAYMENT
  SUPPLIER_PAYMENT
}

model Payment {
  id                String           @id @default(cuid())
  amount            Float
  date              DateTime         @default(now())
  type              PaymentType
  saleInvoice       SaleInvoice?     @relation(fields: [saleInvoiceId], references: [id])
  saleInvoiceId     String?
  purchaseInvoice   PurchaseInvoice? @relation(fields: [purchaseInvoiceId], references: [id])
  purchaseInvoiceId String?
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("payments")
}

model User {
  id            String   @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

  Session          Session[]
  Account          Account[]
  twoFactorEnabled Boolean?

  @@unique([email])
  @@map("user_app")
}

model Session {
  id        String   @id
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verification")
}
